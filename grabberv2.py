from telethon import TelegramClient, events
from telethon import errors
import asyncio
import re
from config import settings
# ----
api_id = settings['api_key']
api_hash = settings['api_hash']
# ----
channels = [-1001166834860, -1001058912111, -1001377397898, -1001006147755, -1001075039748]  # –æ—Ç–∫—É–¥–∞
my_channel = -1001566820757 # –∫—É–¥–∞
# -----
KEYS = {
    "–º–æ—Å–∫–≤–µ:": "–ú–°–ö",
    r"@\S+": "",
    r"https://\S+": "",
    r"http://\S+": "",
    "–ø–∏–ª–∞ –∂–µ—Å—Ç—å": "[—É–∂–µ –Ω–µ –ø–∏–ª–∞](https://t.me/+9HncsoRllms3NjEy)"
}
# ----
Bad_Keys = ['t.me', 'http', '–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', '@', 'joinchat', '#—Ä–µ–∫–ª–∞–º–∞', 'https', 'Olimpbet', '1xbet', 'TTC', '–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å', '–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å', '—ç–º–∏–≥—Ä–∏—Ü–µ–ø—Å', 'MDK', 'SHOT', '–ß–µ–ª–æ–≤–µ–∫ –†–∞–∑—É–º–Ω—ã–π', 'projecthomosapiens', 'UVcSZMPTP9s2ZjQy', 'inside zero', '‚íæ', '‚ö°Ô∏è–ß–∏—Ç–∞—Ç—å', 'ft.com', 'MDK.txt', 'https://t.me/+oqFkBNJwXKljM2Zi']
# ----
tags = '\n\n[üëâFreekNews](https://t.me/FreekNews)'
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫ –ø–æ—Å—Ç—É, –µ—Å–ª–∏ –Ω–µ –Ω–∞–¥–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–≤—ã—á–∫–∏ –ø—É—Å—Ç—ã–º–∏ ""
# ----
with TelegramClient('myApp13', api_id, api_hash) as client:
    print("ÔΩûActivatedÔΩû")

    @client.on(events.NewMessage(chats=channels))
    async def Messages(event):
        if not [element for element in Bad_Keys
                if event.raw_text.lower().__contains__(element)]:
            text = event.raw_text
            for i in KEYS:
                text = re.sub(i, KEYS[i], text)
            if not event.grouped_id\
                    and not event.message.forward:
                try:
                    await client.send_message(
                        entity=my_channel,
                        file=event.message.media,
                        message=text + tags,
                        parse_mode='md',
                        link_preview=False)
                except errors.FloodWaitError as e:
                    print(f'[!] –û—à–∏–±–∫–∞ —Ñ–ª—É–¥–∞ –∂–¥–µ–º: {e.seconds} —Å–µ–∫—É–Ω–¥')
                    await asyncio.sleep(e.seconds)
                except Exception as e:
                    print('[!] –û—à–∏–±–∫–∞', e)
            elif event.message.text and not event.message.media\
                and not event.message.forward\
                    and not event.grouped_id:
                try:
                    await client.send_message(
                        entity=my_channel,
                        message=text + tags,
                        parse_mode='md',
                        link_preview=False)
                except errors.FloodWaitError as e:
                    print(f'[!] –û—à–∏–±–∫–∞ —Ñ–ª—É–¥–∞ –∂–¥–µ–º: {e.seconds} —Å–µ–∫—É–Ω–¥')
                    await asyncio.sleep(e.seconds)
                except Exception as e:
                    print('[!] –û—à–∏–±–∫–∞', e)
            elif event.message.forward:
                try:
                    await event.message.forward_to(my_channel)
                except errors.FloodWaitError as e:
                    print(f'[!] –û—à–∏–±–∫–∞ —Ñ–ª—É–¥–∞ –∂–¥–µ–º: {e.seconds} —Å–µ–∫—É–Ω–¥')
                except Exception as e:
                    print('[!] –û—à–∏–±–∫–∞', e)

    @client.on(events.Album(chats=channels))
    async def Album(event):
        text = event.original_update.message.message
        print(text)
        if not [element for element in Bad_Keys
                if text.lower().__contains__(element)]:
            for i in KEYS:
                text = re.sub(i, KEYS[i], text)
            try:
                await client.send_message(
                    entity=my_channel,
                    file=event.messages,
                    message=text + tags,
                    parse_mode='md',
                    link_preview=False)
            except errors.FloodWaitError as e:
                print(f'[!] –û—à–∏–±–∫–∞ —Ñ–ª—É–¥–∞ –∂–¥–µ–º: {e.seconds} —Å–µ–∫—É–Ω–¥')
                await asyncio.sleep(e.seconds)
            except Exception as e:
                print('[!] –û—à–∏–±–∫–∞', e)

    client.run_until_disconnected()